{"version":3,"file":"static/js/203.5501a0da.chunk.js","mappings":"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","sources":["utils/kanbanApiService.js"],"sourcesContent":["// Dedicated Kanban API Service\n// Uses the new comprehensive Kanban backend endpoints\n\nimport sessionService from './sessionService.js';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://192.168.9.119:8000';\n\nconst getAuthHeaders = (extra = {}) => {\n  const token = sessionService.getSessionToken?.();\n  return {\n    'Content-Type': 'application/json',\n    ...(token ? { Authorization: `Bearer ${token}` } : {}),\n    ...extra,\n  };\n};\n\nconst fetchWithCredentials = async (url, options = {}) => {\n  return fetch(url, {\n    ...options,\n    credentials: 'include',\n    headers: {\n      ...getAuthHeaders(),\n      ...options.headers,\n    },\n  });\n};\n\nconst handle = async (resp) => {\n  const text = await resp.text();\n  let json;\n  try {\n    json = text ? JSON.parse(text) : {};\n  } catch {\n    json = { message: text };\n  }\n  if (!resp.ok) {\n    // Handle validation errors (422) with detailed messages\n    if (resp.status === 422 && json?.detail) {\n      const validationErrors = Array.isArray(json.detail)\n        ? json.detail.map(err => `${err.loc?.join('.')}: ${err.msg}`).join(', ')\n        : json.detail;\n      throw new Error(`Validation error: ${validationErrors}`);\n    }\n\n    const msg = json?.error?.message || json?.message || `HTTP ${resp.status}`;\n    throw new Error(msg);\n  }\n  return json;\n};\n\nconst kanbanApiService = {\n  // Board operations\n  board: {\n    getOrCreateForProject: async (projectId) => {\n      console.log(`🔧 Getting/creating board for project: ${projectId}`);\n      const resp = await fetchWithCredentials(\n        `${API_BASE_URL}/api/v1/kanban/projects/${projectId}/board`\n      );\n      const result = await handle(resp);\n      console.log(`🔧 Board response:`, result);\n      console.log(`🔧 Board response structure - has data property:`, !!result?.data);\n      console.log(`🔧 Board response structure - has id:`, !!result?.id);\n      console.log(`🔧 Board response structure - has columns:`, !!result?.columns);\n      return result;\n    }\n  },\n\n  // Column operations\n  columns: {\n    create: async (boardId, columnData) => {\n      console.log(`🔧 Creating column in board: ${boardId}`, columnData);\n      const resp = await fetchWithCredentials(\n        `${API_BASE_URL}/api/v1/kanban/boards/${boardId}/columns`,\n        {\n          method: 'POST',\n          body: JSON.stringify(columnData),\n        }\n      );\n      const result = await handle(resp);\n      console.log(`🔧 Column creation response:`, result);\n      return result;\n    },\n\n    getCards: async (columnId) => {\n      console.log(`🔧 Getting cards for column: ${columnId}`);\n      const resp = await fetchWithCredentials(\n        `${API_BASE_URL}/api/v1/kanban/columns/${columnId}/cards`\n      );\n      const result = await handle(resp);\n      console.log(`🔧 Cards response:`, result);\n      return result;\n    }\n  },\n\n  // Card operations\n  cards: {\n    create: async (columnId, cardData) => {\n      console.log(`🔧 Creating card in column: ${columnId}`, cardData);\n      const resp = await fetchWithCredentials(\n        `${API_BASE_URL}/api/v1/kanban/columns/${columnId}/cards`,\n        {\n          method: 'POST',\n          body: JSON.stringify(cardData),\n        }\n      );\n      const result = await handle(resp);\n      console.log(`🔧 Card creation response:`, result);\n      return result;\n    },\n\n    update: async (cardId, cardData) => {\n      console.log(`🔧 Updating card: ${cardId}`, cardData);\n      const resp = await fetchWithCredentials(\n        `${API_BASE_URL}/api/v1/kanban/cards/${cardId}`,\n        {\n          method: 'PUT',\n          body: JSON.stringify(cardData),\n        }\n      );\n      const result = await handle(resp);\n      console.log(`🔧 Card update response:`, result);\n      return result;\n    },\n\n    move: async (cardId, targetColumnId, position = null) => {\n      console.log(`🔧 Moving card ${cardId} to column ${targetColumnId} at position ${position}`);\n      const resp = await fetchWithCredentials(\n        `${API_BASE_URL}/api/v1/kanban/cards/${cardId}/move`,\n        {\n          method: 'PUT',\n          body: JSON.stringify({\n            target_column_id: targetColumnId,\n            position: position\n          }),\n        }\n      );\n      const result = await handle(resp);\n      console.log(`🔧 Card move response:`, result);\n      return result;\n    },\n\n    delete: async (cardId) => {\n      console.log(`🔧 Deleting card: ${cardId}`);\n      const resp = await fetchWithCredentials(\n        `${API_BASE_URL}/api/v1/kanban/cards/${cardId}`,\n        {\n          method: 'DELETE',\n        }\n      );\n      const result = await handle(resp);\n      console.log(`🔧 Card deletion response:`, result);\n      return result;\n    }\n  },\n\n  // Utility methods\n  utils: {\n    // Transform backend board data to frontend format\n    transformBoardData: (backendBoard) => {\n      if (!backendBoard) {\n        return null;\n      }\n\n      // Handle both wrapped (backendBoard.data) and direct formats\n      const board = backendBoard.data || backendBoard;\n\n      // Ensure we have the required fields\n      if (!board || !board.id || !board.columns) {\n        console.log('❌ Invalid board data structure:', board);\n        return null;\n      }\n\n      return {\n        id: board.id,\n        name: board.name,\n        description: board.description,\n        project_id: board.project_id,\n        columns: board.columns.map(col => ({\n          id: col.id,\n          title: col.name,\n          name: col.name,\n          position: col.position,\n          order: col.position,\n          color: col.color,\n          board_id: col.board_id\n        })),\n        created_at: board.created_at,\n        updated_at: board.updated_at\n      };\n    },\n\n    // Transform backend card data to frontend format\n    transformCardData: (backendCard) => {\n      if (!backendCard) {\n        return null;\n      }\n\n      const card = backendCard.data || backendCard;\n      return {\n        id: card.id,\n        columnId: card.column_id,\n        title: card.title,\n        description: card.description,\n        position: card.position,\n        priority: card.priority,\n        status: card.status,\n        dueDate: card.due_date,\n        labels: card.labels || [],\n        assignedTo: card.assignments?.map(a => a.user_id) || [],\n        assignments: card.assignments || [],\n        createdBy: card.created_by,\n        createdAt: card.created_at,\n        updatedAt: card.updated_at,\n        checklist: card.checklist_items || []\n      };\n    },\n\n    // Transform frontend card data to backend format\n    transformCardToBackend: (frontendCard) => {\n      return {\n        title: frontendCard.title,\n        description: frontendCard.description || '',\n        priority: frontendCard.priority || 'medium',\n        assigned_to: frontendCard.assignedTo || [],\n        due_date: frontendCard.dueDate || null,\n        labels: frontendCard.labels || []\n      };\n    }\n  }\n};\n\nexport default kanbanApiService;\n"],"names":["API_BASE_URL","process","getAuthHeaders","_sessionService$getSe","extra","arguments","length","undefined","token","sessionService","getSessionToken","call","Authorization","fetchWithCredentials","async","url","options","fetch","credentials","headers","handle","text","resp","json","JSON","parse","message","ok","_json","_json2","_json2$error","_json3","status","detail","validationErrors","Array","isArray","map","err","_err$loc","loc","join","msg","Error","error","board","getOrCreateForProject","console","log","projectId","result","data","id","columns","create","boardId","columnData","method","body","stringify","getCards","columnId","cards","cardData","update","cardId","move","targetColumnId","position","target_column_id","delete","utils","transformBoardData","backendBoard","name","description","project_id","col","title","order","color","board_id","created_at","updated_at","transformCardData","backendCard","_card$assignments","card","column_id","priority","dueDate","due_date","labels","assignedTo","assignments","a","user_id","createdBy","created_by","createdAt","updatedAt","checklist","checklist_items","transformCardToBackend","frontendCard","assigned_to"],"sourceRoot":""}