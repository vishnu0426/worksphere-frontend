{"version":3,"file":"static/js/965.4146700a.chunk.js","mappings":"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","sources":["pages/project-management/components/TasksTab.jsx"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  useDeferredValue,\n} from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport { Checkbox } from '../../../components/ui/Checkbox';\nimport CreateTaskModal from '../../../components/modals/CreateTaskModal';\nimport apiService from '../../../utils/apiService';\n// Lightweight memoized stat card to avoid re-renders when props are stable\nconst TaskStat = React.memo(function TaskStat({\n  iconName,\n  iconClass,\n  label,\n  value,\n}) {\n  return (\n    <div className='bg-card rounded-lg border border-border p-4'>\n      <div className='flex items-center justify-between'>\n        <div>\n          <p className='text-sm text-text-secondary'>{label}</p>\n          <p className='text-2xl font-bold text-foreground'>{value}</p>\n        </div>\n        <Icon name={iconName} size={24} className={iconClass} />\n      </div>\n    </div>\n  );\n});\n\nconst TasksTab = ({ project, userRole }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  const [selectedSort, setSelectedSort] = useState('dueDate');\n  const [selectedTasks, setSelectedTasks] = useState([]);\n  const [showBulkActions, setShowBulkActions] = useState(false);\n  const [isCreateTaskModalOpen, setIsCreateTaskModalOpen] = useState(false);\n\n  // Real tasks data - will be loaded from project\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Load tasks when component mounts or project changes (with debouncing)\n  useEffect(() => {\n    if (project) {\n      // Add small delay to prevent rapid re-renders\n      const timeoutId = setTimeout(() => {\n        loadTasks();\n      }, 100);\n\n      return () => clearTimeout(timeoutId);\n    }\n  }, [project?.id]); // Only depend on project ID to prevent unnecessary re-renders\n\n  const loadTasks = async () => {\n    try {\n      setLoading(true);\n\n      // Parse tasks from project data\n      if (project.tasks) {\n        const projectTasks =\n          typeof project.tasks === 'string'\n            ? JSON.parse(project.tasks)\n            : project.tasks;\n\n        // Transform project tasks to match the expected format\n        const transformedTasks = projectTasks.map((task, index) => ({\n          id: `task-${index + 1}`,\n          title: task.title,\n          description: task.description,\n          status: task.status,\n          priority: task.priority,\n          assignee: 'Unassigned', // Default assignee\n          dueDate: new Date(Date.now() + (index + 1) * 7 * 24 * 60 * 60 * 1000)\n            .toISOString()\n            .split('T')[0], // Default due dates\n          progress:\n            task.status === 'completed'\n              ? 100\n              : task.status === 'in-progress'\n              ? 50\n              : 0,\n          subtasks: task.subtasks || [],\n          tags: [task.priority, project.name.split(' ')[0]],\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        }));\n\n        setTasks(transformedTasks);\n      } else {\n        setTasks([]);\n      }\n    } catch (error) {\n      console.error('Failed to load tasks:', error);\n      setTasks([]);\n    } finally {\n      // Add small delay to prevent rapid state updates\n      setTimeout(() => setLoading(false), 50);\n    }\n  };\n\n  const handleTaskCreated = (newTaskData) => {\n    // Create a new task object\n    const newTask = {\n      id: `task-${Date.now()}`,\n      title: newTaskData.title,\n      description: newTaskData.description,\n      status: 'pending',\n      priority: newTaskData.priority || 'medium',\n      assignee: newTaskData.assignee || 'Unassigned',\n      dueDate:\n        newTaskData.dueDate ||\n        new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n          .toISOString()\n          .split('T')[0],\n      progress: 0,\n      subtasks: newTaskData.subtasks || [],\n      tags: [newTaskData.priority || 'medium', project.name.split(' ')[0]],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    setTasks((prev) => [...prev, newTask]);\n    setIsCreateTaskModalOpen(false);\n\n    // TODO: Update the project's tasks in the backend\n    updateProjectTasks([...tasks, newTask]);\n  };\n\n  const calculateProjectProgress = (tasks) => {\n    if (!tasks || tasks.length === 0) return 0;\n\n    const completedTasks = tasks.filter(\n      (task) => task.status === 'completed'\n    ).length;\n    return Math.round((completedTasks / tasks.length) * 100);\n  };\n\n  const updateProjectTasks = async (updatedTasks) => {\n    try {\n      // Transform tasks back to project format\n      const projectTasks = updatedTasks.map((task) => ({\n        title: task.title,\n        description: task.description,\n        status: task.status,\n        priority: task.priority,\n        subtasks: task.subtasks || [],\n      }));\n\n      // Calculate new progress based on completed tasks\n      const newProgress = calculateProjectProgress(updatedTasks);\n\n      // Update project in backend\n      const updatedProject = {\n        ...project,\n        tasks: JSON.stringify(projectTasks),\n        progress: newProgress,\n      };\n\n      // Call API to update project\n      const response = await apiService.projects.update(\n        project.id,\n        updatedProject\n      );\n      if (response) {\n        console.log('Project tasks updated successfully');\n\n        // Update localStorage\n        localStorage.setItem('currentProject', JSON.stringify(updatedProject));\n\n        // Emit project update event for other components\n        window.dispatchEvent(\n          new CustomEvent('projectUpdated', {\n            detail: { project: updatedProject },\n          })\n        );\n      }\n    } catch (error) {\n      console.error('Failed to update project tasks:', error);\n      // Show error to user\n      alert('Failed to save task changes. Please try again.');\n    }\n  };\n\n  const handleAddTask = () => {\n    setIsCreateTaskModalOpen(true);\n  };\n\n  const handleTaskStatusChange = async (taskId, newStatus) => {\n    const updatedTasks = tasks.map((task) =>\n      task.id === taskId\n        ? {\n            ...task,\n            status: newStatus,\n            progress:\n              newStatus === 'completed'\n                ? 100\n                : newStatus === 'in-progress'\n                ? 50\n                : 0,\n          }\n        : task\n    );\n    setTasks(updatedTasks);\n    await updateProjectTasks(updatedTasks);\n  };\n\n  const handleSubtaskToggle = async (taskId, subtaskIndex) => {\n    const updatedTasks = tasks.map((task) => {\n      if (task.id === taskId && task.subtasks) {\n        const updatedSubtasks = task.subtasks.map((subtask, index) =>\n          index === subtaskIndex\n            ? { ...subtask, completed: !subtask.completed }\n            : subtask\n        );\n\n        // Update task progress based on completed subtasks\n        const completedCount = updatedSubtasks.filter(\n          (st) => st.completed\n        ).length;\n        const progress =\n          updatedSubtasks.length > 0\n            ? Math.round((completedCount / updatedSubtasks.length) * 100)\n            : 0;\n\n        // Update status based on progress\n        let status = task.status;\n        if (progress === 100) status = 'completed';\n        else if (progress > 0) status = 'in-progress';\n        else status = 'pending';\n\n        return { ...task, subtasks: updatedSubtasks, progress, status };\n      }\n      return task;\n    });\n\n    setTasks(updatedTasks);\n    await updateProjectTasks(updatedTasks);\n  };\n\n  const filterOptions = [\n    { value: 'all', label: 'All Tasks' },\n    { value: 'todo', label: 'To Do' },\n    { value: 'in-progress', label: 'In Progress' },\n    { value: 'completed', label: 'Completed' },\n  ];\n\n  const sortOptions = [\n    { value: 'dueDate', label: 'Due Date' },\n    { value: 'priority', label: 'Priority' },\n    { value: 'status', label: 'Status' },\n    { value: 'assignee', label: 'Assignee' },\n    { value: 'title', label: 'Title' },\n  ];\n\n  const priorityOptions = [\n    { value: 'high', label: 'High Priority' },\n    { value: 'medium', label: 'Medium Priority' },\n    { value: 'low', label: 'Low Priority' },\n  ];\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'completed':\n        return 'text-success bg-success/10';\n      case 'in-progress':\n        return 'text-warning bg-warning/10';\n      case 'todo':\n        return 'text-text-secondary bg-muted';\n      default:\n        return 'text-text-secondary bg-muted';\n    }\n  };\n\n  const getPriorityColor = (priority) => {\n    switch (priority) {\n      case 'high':\n        return 'text-error bg-error/10';\n      case 'medium':\n        return 'text-warning bg-warning/10';\n      case 'low':\n        return 'text-success bg-success/10';\n      default:\n        return 'text-text-secondary bg-muted';\n    }\n  };\n\n  const deferredSearchTerm = useDeferredValue(searchTerm);\n\n  const filteredTasks = useMemo(() => {\n    const term = (deferredSearchTerm || '').toLowerCase();\n    return tasks.filter((task) => {\n      const matchesSearch =\n        task.title.toLowerCase().includes(term) ||\n        task.description.toLowerCase().includes(term);\n      const matchesFilter =\n        selectedFilter === 'all' || task.status === selectedFilter;\n      return matchesSearch && matchesFilter;\n    });\n  }, [tasks, deferredSearchTerm, selectedFilter]);\n\n  const sortedTasks = useMemo(() => {\n    const priorityOrder = { high: 3, medium: 2, low: 1 };\n    return [...filteredTasks].sort((a, b) => {\n      switch (selectedSort) {\n        case 'dueDate':\n          return new Date(a.dueDate) - new Date(b.dueDate);\n        case 'priority':\n          return priorityOrder[b.priority] - priorityOrder[a.priority];\n        case 'status':\n          return a.status.localeCompare(b.status);\n        case 'assignee':\n          return a.assignee.localeCompare(b.assignee);\n        case 'title':\n          return a.title.localeCompare(b.title);\n        default:\n          return 0;\n      }\n    });\n  }, [filteredTasks, selectedSort]);\n\n  const handleTaskSelection = useCallback((taskId, checked) => {\n    setSelectedTasks((prev) =>\n      checked ? [...prev, taskId] : prev.filter((id) => id !== taskId)\n    );\n  }, []);\n\n  const handleSelectAll = useCallback(\n    (checked) => {\n      if (checked) {\n        setSelectedTasks(sortedTasks.map((task) => task.id));\n      } else {\n        setSelectedTasks([]);\n      }\n    },\n    [sortedTasks]\n  );\n\n  useEffect(() => {\n    setShowBulkActions(selectedTasks.length > 0);\n  }, [selectedTasks]);\n\n  const handleBulkAction = useCallback(\n    (action) => {\n      console.log(`Performing ${action} on tasks:`, selectedTasks);\n      setSelectedTasks([]);\n      setShowBulkActions(false);\n    },\n    [selectedTasks]\n  );\n\n  const isOverdue = (dueDate) => {\n    return (\n      new Date(dueDate) < new Date() &&\n      new Date(dueDate).toDateString() !== new Date().toDateString()\n    );\n  };\n\n  // Memoized task counts\n  const completedCount = useMemo(\n    () => tasks.filter((t) => t.status === 'completed').length,\n    [tasks]\n  );\n  const inProgressCount = useMemo(\n    () => tasks.filter((t) => t.status === 'in-progress').length,\n    [tasks]\n  );\n  const overdueCount = useMemo(\n    () =>\n      tasks.filter((t) => isOverdue(t.dueDate) && t.status !== 'completed')\n        .length,\n    [tasks]\n  );\n\n  return (\n    <div className='space-y-6'>\n      {/* Header Actions */}\n      <div className='flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4'>\n        <div className='flex flex-col sm:flex-row gap-4 flex-1'>\n          <div className='flex-1 max-w-md'>\n            <Input\n              type='search'\n              placeholder='Search tasks...'\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className='w-full'\n            />\n          </div>\n          <div className='flex gap-2'>\n            <Select\n              options={filterOptions}\n              value={selectedFilter}\n              onChange={setSelectedFilter}\n              placeholder='Filter by status'\n              className='w-40'\n            />\n            <Select\n              options={sortOptions}\n              value={selectedSort}\n              onChange={setSelectedSort}\n              placeholder='Sort by'\n              className='w-32'\n            />\n          </div>\n        </div>\n        <div className='flex gap-2'>\n          <Button variant='outline' iconName='Filter' iconPosition='left'>\n            More Filters\n          </Button>\n          <Button\n            variant='default'\n            iconName='Plus'\n            iconPosition='left'\n            onClick={handleAddTask}\n          >\n            Add Task\n          </Button>\n        </div>\n      </div>\n\n      {/* Bulk Actions */}\n      {showBulkActions && (\n        <div className='bg-primary/10 border border-primary/20 rounded-lg p-4'>\n          <div className='flex items-center justify-between'>\n            <span className='text-sm font-medium text-foreground'>\n              {selectedTasks.length} task{selectedTasks.length !== 1 ? 's' : ''}{' '}\n              selected\n            </span>\n            <div className='flex gap-2'>\n              <Button\n                variant='outline'\n                size='sm'\n                onClick={() => handleBulkAction('assign')}\n              >\n                Assign\n              </Button>\n              <Button\n                variant='outline'\n                size='sm'\n                onClick={() => handleBulkAction('status')}\n              >\n                Change Status\n              </Button>\n              <Button\n                variant='outline'\n                size='sm'\n                onClick={() => handleBulkAction('priority')}\n              >\n                Set Priority\n              </Button>\n              <Button\n                variant='destructive'\n                size='sm'\n                onClick={() => handleBulkAction('delete')}\n              >\n                Delete\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Tasks Table */}\n      <div className='bg-card rounded-lg border border-border overflow-hidden'>\n        <div className='overflow-x-auto'>\n          <table className='w-full'>\n            <thead className='bg-muted/50 border-b border-border'>\n              <tr>\n                <th className='text-left p-4 w-12'>\n                  <Checkbox\n                    checked={\n                      selectedTasks.length === sortedTasks.length &&\n                      sortedTasks.length > 0\n                    }\n                    onChange={(e) => handleSelectAll(e.target.checked)}\n                    indeterminate={\n                      selectedTasks.length > 0 &&\n                      selectedTasks.length < sortedTasks.length\n                    }\n                  />\n                </th>\n                <th className='text-left p-4 font-medium text-foreground'>\n                  Task\n                </th>\n                <th className='text-left p-4 font-medium text-foreground'>\n                  Status\n                </th>\n                <th className='text-left p-4 font-medium text-foreground'>\n                  Priority\n                </th>\n                <th className='text-left p-4 font-medium text-foreground'>\n                  Assignee\n                </th>\n                <th className='text-left p-4 font-medium text-foreground'>\n                  Due Date\n                </th>\n                <th className='text-left p-4 font-medium text-foreground'>\n                  Progress\n                </th>\n                <th className='text-left p-4 font-medium text-foreground'>\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {sortedTasks.map((task) => (\n                <tr\n                  key={task.id}\n                  className='border-b border-border hover:bg-muted/30 transition-colors'\n                >\n                  <td className='p-4'>\n                    <Checkbox\n                      checked={selectedTasks.includes(task.id)}\n                      onChange={(e) =>\n                        handleTaskSelection(task.id, e.target.checked)\n                      }\n                    />\n                  </td>\n                  <td className='p-4'>\n                    <div className='space-y-2'>\n                      <h4 className='font-medium text-foreground hover:text-primary cursor-pointer'>\n                        {task.title}\n                      </h4>\n                      <p className='text-sm text-text-secondary line-clamp-2'>\n                        {task.description}\n                      </p>\n\n                      {/* Subtasks */}\n                      {task.subtasks && task.subtasks.length > 0 && (\n                        <div className='space-y-1'>\n                          <p className='text-xs text-text-secondary font-medium'>\n                            Subtasks:\n                          </p>\n                          {task.subtasks.slice(0, 3).map((subtask, index) => (\n                            <div\n                              key={index}\n                              className='flex items-center gap-2 text-xs'\n                            >\n                              <Checkbox\n                                checked={subtask.completed}\n                                onChange={() =>\n                                  handleSubtaskToggle(task.id, index)\n                                }\n                                size='sm'\n                              />\n                              <span\n                                className={\n                                  subtask.completed\n                                    ? 'line-through text-text-secondary'\n                                    : 'text-foreground'\n                                }\n                              >\n                                {subtask.text}\n                              </span>\n                            </div>\n                          ))}\n                          {task.subtasks.length > 3 && (\n                            <p className='text-xs text-text-secondary'>\n                              +{task.subtasks.length - 3} more\n                            </p>\n                          )}\n                        </div>\n                      )}\n\n                      <div className='flex items-center gap-2'>\n                        {task.tags &&\n                          task.tags.slice(0, 2).map((tag) => (\n                            <span\n                              key={tag}\n                              className='px-2 py-1 bg-muted rounded-full text-xs text-text-secondary'\n                            >\n                              {tag}\n                            </span>\n                          ))}\n                        {task.tags && task.tags.length > 2 && (\n                          <span className='text-xs text-text-secondary'>\n                            +{task.tags.length - 2}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </td>\n                  <td className='p-4'>\n                    <Select\n                      options={[\n                        { value: 'pending', label: 'Pending' },\n                        { value: 'in-progress', label: 'In Progress' },\n                        { value: 'completed', label: 'Completed' },\n                      ]}\n                      value={task.status}\n                      onChange={(newStatus) =>\n                        handleTaskStatusChange(task.id, newStatus)\n                      }\n                      className='w-32'\n                    />\n                  </td>\n                  <td className='p-4'>\n                    <span\n                      className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(\n                        task.priority\n                      )}`}\n                    >\n                      {task.priority}\n                    </span>\n                  </td>\n                  <td className='p-4'>\n                    <div className='flex items-center gap-2'>\n                      <div className='w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center'>\n                        <Icon name='User' size={16} className='text-primary' />\n                      </div>\n                      <span className='text-sm text-foreground'>\n                        {task.assignee}\n                      </span>\n                    </div>\n                  </td>\n                  <td className='p-4'>\n                    <div className='flex items-center gap-2'>\n                      <span\n                        className={`text-sm ${\n                          isOverdue(task.dueDate)\n                            ? 'text-error font-medium'\n                            : 'text-foreground'\n                        }`}\n                      >\n                        {new Date(task.dueDate).toLocaleDateString()}\n                      </span>\n                      {isOverdue(task.dueDate) && (\n                        <Icon\n                          name='AlertTriangle'\n                          size={14}\n                          className='text-error'\n                        />\n                      )}\n                    </div>\n                  </td>\n                  <td className='p-4'>\n                    <div className='flex items-center gap-2'>\n                      <div className='w-16 bg-muted rounded-full h-2'>\n                        <div\n                          className='bg-primary h-2 rounded-full transition-all duration-300'\n                          style={{ width: `${task.progress}%` }}\n                        />\n                      </div>\n                      <span className='text-sm text-text-secondary'>\n                        {task.progress}%\n                      </span>\n                    </div>\n                  </td>\n                  <td className='p-4'>\n                    <div className='flex items-center gap-1'>\n                      <Button variant='ghost' size='sm' iconName='Eye' />\n                      <Button variant='ghost' size='sm' iconName='Edit' />\n                      <Button\n                        variant='ghost'\n                        size='sm'\n                        iconName='MoreHorizontal'\n                      />\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Task Statistics */}\n      <div className='grid grid-cols-1 md:grid-cols-4 gap-4'>\n        <TaskStat\n          iconName='CheckSquare'\n          iconClass='text-primary'\n          label='Total Tasks'\n          value={tasks.length}\n        />\n        <TaskStat\n          iconName='CheckCircle'\n          iconClass='text-success'\n          label='Completed'\n          value={completedCount}\n        />\n        <TaskStat\n          iconName='Clock'\n          iconClass='text-warning'\n          label='In Progress'\n          value={inProgressCount}\n        />\n        <TaskStat\n          iconName='AlertTriangle'\n          iconClass='text-error'\n          label='Overdue'\n          value={overdueCount}\n        />\n      </div>\n\n      {/* Create Task Modal */}\n      <CreateTaskModal\n        isOpen={isCreateTaskModalOpen}\n        onClose={() => setIsCreateTaskModalOpen(false)}\n        onTaskCreated={handleTaskCreated}\n        projectId={project?.id}\n        project={project}\n      />\n    </div>\n  );\n};\n\nexport default TasksTab;\n"],"names":["TaskStat","React","_ref","iconName","iconClass","label","value","_jsx","className","children","_jsxs","Icon","name","size","_ref2","project","userRole","searchTerm","setSearchTerm","useState","selectedFilter","setSelectedFilter","selectedSort","setSelectedSort","selectedTasks","setSelectedTasks","showBulkActions","setShowBulkActions","isCreateTaskModalOpen","setIsCreateTaskModalOpen","tasks","setTasks","loading","setLoading","useEffect","timeoutId","setTimeout","loadTasks","clearTimeout","id","async","transformedTasks","JSON","parse","map","task","index","title","description","status","priority","assignee","dueDate","Date","now","toISOString","split","progress","subtasks","tags","createdAt","updatedAt","error","console","updateProjectTasks","projectTasks","updatedTasks","newProgress","length","completedTasks","filter","Math","round","calculateProjectProgress","updatedProject","stringify","apiService","projects","update","log","localStorage","setItem","window","dispatchEvent","CustomEvent","detail","alert","getPriorityColor","deferredSearchTerm","useDeferredValue","filteredTasks","useMemo","term","toLowerCase","matchesSearch","includes","matchesFilter","sortedTasks","priorityOrder","high","medium","low","sort","a","b","localeCompare","handleTaskSelection","useCallback","taskId","checked","prev","handleSelectAll","handleBulkAction","action","isOverdue","toDateString","completedCount","t","inProgressCount","overdueCount","Input","type","placeholder","onChange","e","target","Select","options","Button","variant","iconPosition","onClick","handleAddTask","Checkbox","indeterminate","slice","subtask","completed","subtaskIndex","updatedSubtasks","st","handleSubtaskToggle","text","tag","newStatus","handleTaskStatusChange","toLocaleDateString","style","width","CreateTaskModal","isOpen","onClose","onTaskCreated","newTaskData","newTask","projectId"],"sourceRoot":""}