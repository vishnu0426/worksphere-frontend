{"version":3,"file":"static/js/965.4146700a.chunk.js","mappings":"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","sources":["pages/project-management/components/TasksTab.jsx"],"sourcesContent":["import React, {\r\n  useState,\r\n  useEffect,\r\n  useMemo,\r\n  useCallback,\r\n  useDeferredValue,\r\n} from 'react';\r\nimport Icon from '../../../components/AppIcon';\r\nimport Button from '../../../components/ui/Button';\r\nimport Input from '../../../components/ui/Input';\r\nimport Select from '../../../components/ui/Select';\r\nimport { Checkbox } from '../../../components/ui/Checkbox';\r\nimport CreateTaskModal from '../../../components/modals/CreateTaskModal';\r\nimport apiService from '../../../utils/apiService';\r\n// Lightweight memoized stat card to avoid re-renders when props are stable\r\nconst TaskStat = React.memo(function TaskStat({\r\n  iconName,\r\n  iconClass,\r\n  label,\r\n  value,\r\n}) {\r\n  return (\r\n    <div className='bg-card rounded-lg border border-border p-4'>\r\n      <div className='flex items-center justify-between'>\r\n        <div>\r\n          <p className='text-sm text-text-secondary'>{label}</p>\r\n          <p className='text-2xl font-bold text-foreground'>{value}</p>\r\n        </div>\r\n        <Icon name={iconName} size={24} className={iconClass} />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst TasksTab = ({ project, userRole }) => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedFilter, setSelectedFilter] = useState('all');\r\n  const [selectedSort, setSelectedSort] = useState('dueDate');\r\n  const [selectedTasks, setSelectedTasks] = useState([]);\r\n  const [showBulkActions, setShowBulkActions] = useState(false);\r\n  const [isCreateTaskModalOpen, setIsCreateTaskModalOpen] = useState(false);\r\n\r\n  // Real tasks data - will be loaded from project\r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Load tasks when component mounts or project changes (with debouncing)\r\n  useEffect(() => {\r\n    if (project) {\r\n      // Add small delay to prevent rapid re-renders\r\n      const timeoutId = setTimeout(() => {\r\n        loadTasks();\r\n      }, 100);\r\n\r\n      return () => clearTimeout(timeoutId);\r\n    }\r\n  }, [project?.id]); // Only depend on project ID to prevent unnecessary re-renders\r\n\r\n  const loadTasks = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Parse tasks from project data\r\n      if (project.tasks) {\r\n        const projectTasks =\r\n          typeof project.tasks === 'string'\r\n            ? JSON.parse(project.tasks)\r\n            : project.tasks;\r\n\r\n        // Transform project tasks to match the expected format\r\n        const transformedTasks = projectTasks.map((task, index) => ({\r\n          id: `task-${index + 1}`,\r\n          title: task.title,\r\n          description: task.description,\r\n          status: task.status,\r\n          priority: task.priority,\r\n          assignee: 'Unassigned', // Default assignee\r\n          dueDate: new Date(Date.now() + (index + 1) * 7 * 24 * 60 * 60 * 1000)\r\n            .toISOString()\r\n            .split('T')[0], // Default due dates\r\n          progress:\r\n            task.status === 'completed'\r\n              ? 100\r\n              : task.status === 'in-progress'\r\n              ? 50\r\n              : 0,\r\n          subtasks: task.subtasks || [],\r\n          tags: [task.priority, project.name.split(' ')[0]],\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString(),\r\n        }));\r\n\r\n        setTasks(transformedTasks);\r\n      } else {\r\n        setTasks([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load tasks:', error);\r\n      setTasks([]);\r\n    } finally {\r\n      // Add small delay to prevent rapid state updates\r\n      setTimeout(() => setLoading(false), 50);\r\n    }\r\n  };\r\n\r\n  const handleTaskCreated = (newTaskData) => {\r\n    // Create a new task object\r\n    const newTask = {\r\n      id: `task-${Date.now()}`,\r\n      title: newTaskData.title,\r\n      description: newTaskData.description,\r\n      status: 'pending',\r\n      priority: newTaskData.priority || 'medium',\r\n      assignee: newTaskData.assignee || 'Unassigned',\r\n      dueDate:\r\n        newTaskData.dueDate ||\r\n        new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\r\n          .toISOString()\r\n          .split('T')[0],\r\n      progress: 0,\r\n      subtasks: newTaskData.subtasks || [],\r\n      tags: [newTaskData.priority || 'medium', project.name.split(' ')[0]],\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    setTasks((prev) => [...prev, newTask]);\r\n    setIsCreateTaskModalOpen(false);\r\n\r\n    // TODO: Update the project's tasks in the backend\r\n    updateProjectTasks([...tasks, newTask]);\r\n  };\r\n\r\n  const calculateProjectProgress = (tasks) => {\r\n    if (!tasks || tasks.length === 0) return 0;\r\n\r\n    const completedTasks = tasks.filter(\r\n      (task) => task.status === 'completed'\r\n    ).length;\r\n    return Math.round((completedTasks / tasks.length) * 100);\r\n  };\r\n\r\n  const updateProjectTasks = async (updatedTasks) => {\r\n    try {\r\n      // Transform tasks back to project format\r\n      const projectTasks = updatedTasks.map((task) => ({\r\n        title: task.title,\r\n        description: task.description,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        subtasks: task.subtasks || [],\r\n      }));\r\n\r\n      // Calculate new progress based on completed tasks\r\n      const newProgress = calculateProjectProgress(updatedTasks);\r\n\r\n      // Update project in backend\r\n      const updatedProject = {\r\n        ...project,\r\n        tasks: JSON.stringify(projectTasks),\r\n        progress: newProgress,\r\n      };\r\n\r\n      // Call API to update project\r\n      const response = await apiService.projects.update(\r\n        project.id,\r\n        updatedProject\r\n      );\r\n      if (response) {\r\n        console.log('Project tasks updated successfully');\r\n\r\n        // Update localStorage\r\n        localStorage.setItem('currentProject', JSON.stringify(updatedProject));\r\n\r\n        // Emit project update event for other components\r\n        window.dispatchEvent(\r\n          new CustomEvent('projectUpdated', {\r\n            detail: { project: updatedProject },\r\n          })\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to update project tasks:', error);\r\n      // Show error to user\r\n      alert('Failed to save task changes. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleAddTask = () => {\r\n    setIsCreateTaskModalOpen(true);\r\n  };\r\n\r\n  const handleTaskStatusChange = async (taskId, newStatus) => {\r\n    const updatedTasks = tasks.map((task) =>\r\n      task.id === taskId\r\n        ? {\r\n            ...task,\r\n            status: newStatus,\r\n            progress:\r\n              newStatus === 'completed'\r\n                ? 100\r\n                : newStatus === 'in-progress'\r\n                ? 50\r\n                : 0,\r\n          }\r\n        : task\r\n    );\r\n    setTasks(updatedTasks);\r\n    await updateProjectTasks(updatedTasks);\r\n  };\r\n\r\n  const handleSubtaskToggle = async (taskId, subtaskIndex) => {\r\n    const updatedTasks = tasks.map((task) => {\r\n      if (task.id === taskId && task.subtasks) {\r\n        const updatedSubtasks = task.subtasks.map((subtask, index) =>\r\n          index === subtaskIndex\r\n            ? { ...subtask, completed: !subtask.completed }\r\n            : subtask\r\n        );\r\n\r\n        // Update task progress based on completed subtasks\r\n        const completedCount = updatedSubtasks.filter(\r\n          (st) => st.completed\r\n        ).length;\r\n        const progress =\r\n          updatedSubtasks.length > 0\r\n            ? Math.round((completedCount / updatedSubtasks.length) * 100)\r\n            : 0;\r\n\r\n        // Update status based on progress\r\n        let status = task.status;\r\n        if (progress === 100) status = 'completed';\r\n        else if (progress > 0) status = 'in-progress';\r\n        else status = 'pending';\r\n\r\n        return { ...task, subtasks: updatedSubtasks, progress, status };\r\n      }\r\n      return task;\r\n    });\r\n\r\n    setTasks(updatedTasks);\r\n    await updateProjectTasks(updatedTasks);\r\n  };\r\n\r\n  const filterOptions = [\r\n    { value: 'all', label: 'All Tasks' },\r\n    { value: 'todo', label: 'To Do' },\r\n    { value: 'in-progress', label: 'In Progress' },\r\n    { value: 'completed', label: 'Completed' },\r\n  ];\r\n\r\n  const sortOptions = [\r\n    { value: 'dueDate', label: 'Due Date' },\r\n    { value: 'priority', label: 'Priority' },\r\n    { value: 'status', label: 'Status' },\r\n    { value: 'assignee', label: 'Assignee' },\r\n    { value: 'title', label: 'Title' },\r\n  ];\r\n\r\n  const priorityOptions = [\r\n    { value: 'high', label: 'High Priority' },\r\n    { value: 'medium', label: 'Medium Priority' },\r\n    { value: 'low', label: 'Low Priority' },\r\n  ];\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'completed':\r\n        return 'text-success bg-success/10';\r\n      case 'in-progress':\r\n        return 'text-warning bg-warning/10';\r\n      case 'todo':\r\n        return 'text-text-secondary bg-muted';\r\n      default:\r\n        return 'text-text-secondary bg-muted';\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority) => {\r\n    switch (priority) {\r\n      case 'high':\r\n        return 'text-error bg-error/10';\r\n      case 'medium':\r\n        return 'text-warning bg-warning/10';\r\n      case 'low':\r\n        return 'text-success bg-success/10';\r\n      default:\r\n        return 'text-text-secondary bg-muted';\r\n    }\r\n  };\r\n\r\n  const deferredSearchTerm = useDeferredValue(searchTerm);\r\n\r\n  const filteredTasks = useMemo(() => {\r\n    const term = (deferredSearchTerm || '').toLowerCase();\r\n    return tasks.filter((task) => {\r\n      const matchesSearch =\r\n        task.title.toLowerCase().includes(term) ||\r\n        task.description.toLowerCase().includes(term);\r\n      const matchesFilter =\r\n        selectedFilter === 'all' || task.status === selectedFilter;\r\n      return matchesSearch && matchesFilter;\r\n    });\r\n  }, [tasks, deferredSearchTerm, selectedFilter]);\r\n\r\n  const sortedTasks = useMemo(() => {\r\n    const priorityOrder = { high: 3, medium: 2, low: 1 };\r\n    return [...filteredTasks].sort((a, b) => {\r\n      switch (selectedSort) {\r\n        case 'dueDate':\r\n          return new Date(a.dueDate) - new Date(b.dueDate);\r\n        case 'priority':\r\n          return priorityOrder[b.priority] - priorityOrder[a.priority];\r\n        case 'status':\r\n          return a.status.localeCompare(b.status);\r\n        case 'assignee':\r\n          return a.assignee.localeCompare(b.assignee);\r\n        case 'title':\r\n          return a.title.localeCompare(b.title);\r\n        default:\r\n          return 0;\r\n      }\r\n    });\r\n  }, [filteredTasks, selectedSort]);\r\n\r\n  const handleTaskSelection = useCallback((taskId, checked) => {\r\n    setSelectedTasks((prev) =>\r\n      checked ? [...prev, taskId] : prev.filter((id) => id !== taskId)\r\n    );\r\n  }, []);\r\n\r\n  const handleSelectAll = useCallback(\r\n    (checked) => {\r\n      if (checked) {\r\n        setSelectedTasks(sortedTasks.map((task) => task.id));\r\n      } else {\r\n        setSelectedTasks([]);\r\n      }\r\n    },\r\n    [sortedTasks]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setShowBulkActions(selectedTasks.length > 0);\r\n  }, [selectedTasks]);\r\n\r\n  const handleBulkAction = useCallback(\r\n    (action) => {\r\n      console.log(`Performing ${action} on tasks:`, selectedTasks);\r\n      setSelectedTasks([]);\r\n      setShowBulkActions(false);\r\n    },\r\n    [selectedTasks]\r\n  );\r\n\r\n  const isOverdue = (dueDate) => {\r\n    return (\r\n      new Date(dueDate) < new Date() &&\r\n      new Date(dueDate).toDateString() !== new Date().toDateString()\r\n    );\r\n  };\r\n\r\n  // Memoized task counts\r\n  const completedCount = useMemo(\r\n    () => tasks.filter((t) => t.status === 'completed').length,\r\n    [tasks]\r\n  );\r\n  const inProgressCount = useMemo(\r\n    () => tasks.filter((t) => t.status === 'in-progress').length,\r\n    [tasks]\r\n  );\r\n  const overdueCount = useMemo(\r\n    () =>\r\n      tasks.filter((t) => isOverdue(t.dueDate) && t.status !== 'completed')\r\n        .length,\r\n    [tasks]\r\n  );\r\n\r\n  return (\r\n    <div className='space-y-6'>\r\n      {/* Header Actions */}\r\n      <div className='flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4'>\r\n        <div className='flex flex-col sm:flex-row gap-4 flex-1'>\r\n          <div className='flex-1 max-w-md'>\r\n            <Input\r\n              type='search'\r\n              placeholder='Search tasks...'\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className='w-full'\r\n            />\r\n          </div>\r\n          <div className='flex gap-2'>\r\n            <Select\r\n              options={filterOptions}\r\n              value={selectedFilter}\r\n              onChange={setSelectedFilter}\r\n              placeholder='Filter by status'\r\n              className='w-40'\r\n            />\r\n            <Select\r\n              options={sortOptions}\r\n              value={selectedSort}\r\n              onChange={setSelectedSort}\r\n              placeholder='Sort by'\r\n              className='w-32'\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='flex gap-2'>\r\n          <Button variant='outline' iconName='Filter' iconPosition='left'>\r\n            More Filters\r\n          </Button>\r\n          <Button\r\n            variant='default'\r\n            iconName='Plus'\r\n            iconPosition='left'\r\n            onClick={handleAddTask}\r\n          >\r\n            Add Task\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Bulk Actions */}\r\n      {showBulkActions && (\r\n        <div className='bg-primary/10 border border-primary/20 rounded-lg p-4'>\r\n          <div className='flex items-center justify-between'>\r\n            <span className='text-sm font-medium text-foreground'>\r\n              {selectedTasks.length} task{selectedTasks.length !== 1 ? 's' : ''}{' '}\r\n              selected\r\n            </span>\r\n            <div className='flex gap-2'>\r\n              <Button\r\n                variant='outline'\r\n                size='sm'\r\n                onClick={() => handleBulkAction('assign')}\r\n              >\r\n                Assign\r\n              </Button>\r\n              <Button\r\n                variant='outline'\r\n                size='sm'\r\n                onClick={() => handleBulkAction('status')}\r\n              >\r\n                Change Status\r\n              </Button>\r\n              <Button\r\n                variant='outline'\r\n                size='sm'\r\n                onClick={() => handleBulkAction('priority')}\r\n              >\r\n                Set Priority\r\n              </Button>\r\n              <Button\r\n                variant='destructive'\r\n                size='sm'\r\n                onClick={() => handleBulkAction('delete')}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Tasks Table */}\r\n      <div className='bg-card rounded-lg border border-border overflow-hidden'>\r\n        <div className='overflow-x-auto'>\r\n          <table className='w-full'>\r\n            <thead className='bg-muted/50 border-b border-border'>\r\n              <tr>\r\n                <th className='text-left p-4 w-12'>\r\n                  <Checkbox\r\n                    checked={\r\n                      selectedTasks.length === sortedTasks.length &&\r\n                      sortedTasks.length > 0\r\n                    }\r\n                    onChange={(e) => handleSelectAll(e.target.checked)}\r\n                    indeterminate={\r\n                      selectedTasks.length > 0 &&\r\n                      selectedTasks.length < sortedTasks.length\r\n                    }\r\n                  />\r\n                </th>\r\n                <th className='text-left p-4 font-medium text-foreground'>\r\n                  Task\r\n                </th>\r\n                <th className='text-left p-4 font-medium text-foreground'>\r\n                  Status\r\n                </th>\r\n                <th className='text-left p-4 font-medium text-foreground'>\r\n                  Priority\r\n                </th>\r\n                <th className='text-left p-4 font-medium text-foreground'>\r\n                  Assignee\r\n                </th>\r\n                <th className='text-left p-4 font-medium text-foreground'>\r\n                  Due Date\r\n                </th>\r\n                <th className='text-left p-4 font-medium text-foreground'>\r\n                  Progress\r\n                </th>\r\n                <th className='text-left p-4 font-medium text-foreground'>\r\n                  Actions\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {sortedTasks.map((task) => (\r\n                <tr\r\n                  key={task.id}\r\n                  className='border-b border-border hover:bg-muted/30 transition-colors'\r\n                >\r\n                  <td className='p-4'>\r\n                    <Checkbox\r\n                      checked={selectedTasks.includes(task.id)}\r\n                      onChange={(e) =>\r\n                        handleTaskSelection(task.id, e.target.checked)\r\n                      }\r\n                    />\r\n                  </td>\r\n                  <td className='p-4'>\r\n                    <div className='space-y-2'>\r\n                      <h4 className='font-medium text-foreground hover:text-primary cursor-pointer'>\r\n                        {task.title}\r\n                      </h4>\r\n                      <p className='text-sm text-text-secondary line-clamp-2'>\r\n                        {task.description}\r\n                      </p>\r\n\r\n                      {/* Subtasks */}\r\n                      {task.subtasks && task.subtasks.length > 0 && (\r\n                        <div className='space-y-1'>\r\n                          <p className='text-xs text-text-secondary font-medium'>\r\n                            Subtasks:\r\n                          </p>\r\n                          {task.subtasks.slice(0, 3).map((subtask, index) => (\r\n                            <div\r\n                              key={index}\r\n                              className='flex items-center gap-2 text-xs'\r\n                            >\r\n                              <Checkbox\r\n                                checked={subtask.completed}\r\n                                onChange={() =>\r\n                                  handleSubtaskToggle(task.id, index)\r\n                                }\r\n                                size='sm'\r\n                              />\r\n                              <span\r\n                                className={\r\n                                  subtask.completed\r\n                                    ? 'line-through text-text-secondary'\r\n                                    : 'text-foreground'\r\n                                }\r\n                              >\r\n                                {subtask.text}\r\n                              </span>\r\n                            </div>\r\n                          ))}\r\n                          {task.subtasks.length > 3 && (\r\n                            <p className='text-xs text-text-secondary'>\r\n                              +{task.subtasks.length - 3} more\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n\r\n                      <div className='flex items-center gap-2'>\r\n                        {task.tags &&\r\n                          task.tags.slice(0, 2).map((tag) => (\r\n                            <span\r\n                              key={tag}\r\n                              className='px-2 py-1 bg-muted rounded-full text-xs text-text-secondary'\r\n                            >\r\n                              {tag}\r\n                            </span>\r\n                          ))}\r\n                        {task.tags && task.tags.length > 2 && (\r\n                          <span className='text-xs text-text-secondary'>\r\n                            +{task.tags.length - 2}\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                  <td className='p-4'>\r\n                    <Select\r\n                      options={[\r\n                        { value: 'pending', label: 'Pending' },\r\n                        { value: 'in-progress', label: 'In Progress' },\r\n                        { value: 'completed', label: 'Completed' },\r\n                      ]}\r\n                      value={task.status}\r\n                      onChange={(newStatus) =>\r\n                        handleTaskStatusChange(task.id, newStatus)\r\n                      }\r\n                      className='w-32'\r\n                    />\r\n                  </td>\r\n                  <td className='p-4'>\r\n                    <span\r\n                      className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(\r\n                        task.priority\r\n                      )}`}\r\n                    >\r\n                      {task.priority}\r\n                    </span>\r\n                  </td>\r\n                  <td className='p-4'>\r\n                    <div className='flex items-center gap-2'>\r\n                      <div className='w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center'>\r\n                        <Icon name='User' size={16} className='text-primary' />\r\n                      </div>\r\n                      <span className='text-sm text-foreground'>\r\n                        {task.assignee}\r\n                      </span>\r\n                    </div>\r\n                  </td>\r\n                  <td className='p-4'>\r\n                    <div className='flex items-center gap-2'>\r\n                      <span\r\n                        className={`text-sm ${\r\n                          isOverdue(task.dueDate)\r\n                            ? 'text-error font-medium'\r\n                            : 'text-foreground'\r\n                        }`}\r\n                      >\r\n                        {new Date(task.dueDate).toLocaleDateString()}\r\n                      </span>\r\n                      {isOverdue(task.dueDate) && (\r\n                        <Icon\r\n                          name='AlertTriangle'\r\n                          size={14}\r\n                          className='text-error'\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                  <td className='p-4'>\r\n                    <div className='flex items-center gap-2'>\r\n                      <div className='w-16 bg-muted rounded-full h-2'>\r\n                        <div\r\n                          className='bg-primary h-2 rounded-full transition-all duration-300'\r\n                          style={{ width: `${task.progress}%` }}\r\n                        />\r\n                      </div>\r\n                      <span className='text-sm text-text-secondary'>\r\n                        {task.progress}%\r\n                      </span>\r\n                    </div>\r\n                  </td>\r\n                  <td className='p-4'>\r\n                    <div className='flex items-center gap-1'>\r\n                      <Button variant='ghost' size='sm' iconName='Eye' />\r\n                      <Button variant='ghost' size='sm' iconName='Edit' />\r\n                      <Button\r\n                        variant='ghost'\r\n                        size='sm'\r\n                        iconName='MoreHorizontal'\r\n                      />\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Task Statistics */}\r\n      <div className='grid grid-cols-1 md:grid-cols-4 gap-4'>\r\n        <TaskStat\r\n          iconName='CheckSquare'\r\n          iconClass='text-primary'\r\n          label='Total Tasks'\r\n          value={tasks.length}\r\n        />\r\n        <TaskStat\r\n          iconName='CheckCircle'\r\n          iconClass='text-success'\r\n          label='Completed'\r\n          value={completedCount}\r\n        />\r\n        <TaskStat\r\n          iconName='Clock'\r\n          iconClass='text-warning'\r\n          label='In Progress'\r\n          value={inProgressCount}\r\n        />\r\n        <TaskStat\r\n          iconName='AlertTriangle'\r\n          iconClass='text-error'\r\n          label='Overdue'\r\n          value={overdueCount}\r\n        />\r\n      </div>\r\n\r\n      {/* Create Task Modal */}\r\n      <CreateTaskModal\r\n        isOpen={isCreateTaskModalOpen}\r\n        onClose={() => setIsCreateTaskModalOpen(false)}\r\n        onTaskCreated={handleTaskCreated}\r\n        projectId={project?.id}\r\n        project={project}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TasksTab;\r\n"],"names":["TaskStat","React","_ref","iconName","iconClass","label","value","_jsx","className","children","_jsxs","Icon","name","size","_ref2","project","userRole","searchTerm","setSearchTerm","useState","selectedFilter","setSelectedFilter","selectedSort","setSelectedSort","selectedTasks","setSelectedTasks","showBulkActions","setShowBulkActions","isCreateTaskModalOpen","setIsCreateTaskModalOpen","tasks","setTasks","loading","setLoading","useEffect","timeoutId","setTimeout","loadTasks","clearTimeout","id","async","transformedTasks","JSON","parse","map","task","index","title","description","status","priority","assignee","dueDate","Date","now","toISOString","split","progress","subtasks","tags","createdAt","updatedAt","error","console","updateProjectTasks","projectTasks","updatedTasks","newProgress","length","completedTasks","filter","Math","round","calculateProjectProgress","updatedProject","stringify","apiService","projects","update","log","localStorage","setItem","window","dispatchEvent","CustomEvent","detail","alert","getPriorityColor","deferredSearchTerm","useDeferredValue","filteredTasks","useMemo","term","toLowerCase","matchesSearch","includes","matchesFilter","sortedTasks","priorityOrder","high","medium","low","sort","a","b","localeCompare","handleTaskSelection","useCallback","taskId","checked","prev","handleSelectAll","handleBulkAction","action","isOverdue","toDateString","completedCount","t","inProgressCount","overdueCount","Input","type","placeholder","onChange","e","target","Select","options","Button","variant","iconPosition","onClick","handleAddTask","Checkbox","indeterminate","slice","subtask","completed","subtaskIndex","updatedSubtasks","st","handleSubtaskToggle","text","tag","newStatus","handleTaskStatusChange","toLocaleDateString","style","width","CreateTaskModal","isOpen","onClose","onTaskCreated","newTaskData","newTask","projectId"],"sourceRoot":""}